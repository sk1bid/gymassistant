import asyncio
import logging
import time
from asyncio import gather
from datetime import date

from aiogram.types import InputMediaPhoto
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from database.models import Set
from database.orm_query import (
    orm_get_program,
    orm_get_programs,
    orm_get_training_day,
    orm_get_training_days,
    orm_get_exercises,
    orm_get_exercise,
    orm_get_banner,
    orm_get_user_by_id,
    orm_add_exercise,
    orm_get_admin_exercise,
    orm_get_categories,
    orm_get_admin_exercises_in_category,
    orm_get_category,
    orm_get_exercise_sets,
    orm_turn_on_off_program,
    orm_get_user_exercises_in_category, orm_get_user_exercises, orm_get_user_exercise,
    orm_get_training_sessions_by_user, orm_get_training_session
)
from kbds.inline import (
    error_btns,
    get_user_programs_list,
    get_training_day_btns,
    get_profile_btns,
    get_schedule_btns,
    get_category_exercise_btns,
    get_category_btns,
    get_program_btns,
    get_trd_edit_btns,
    get_program_stgs_btns,
    get_edit_exercise_btns,
    get_exercise_settings_btns,
    get_training_process_btns,
    get_user_main_btns,
    get_custom_exercise_btns,
    get_sessions_results_btns,
    get_exercises_result_btns, )
from utils.paginator import Paginator
from utils.separator import get_action_part
from utils.temporary_storage import retrieve_data_temporarily

WEEK_DAYS_RU = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]


def exercises_in_program(user_exercises: list, circle_training: bool = False):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏
    –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω

    :param user_exercises: –°–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    :param circle_training: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫—Ä—É–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
    :return:
    """
    caption_text = "<b>–í–∞—à–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n\n"

    if not user_exercises:
        if circle_training:
            caption_text += (
                "<strong>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∫—Ä—É–≥–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.</strong>"
            )
        else:
            caption_text += "<strong>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!</strong>"
        return caption_text

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–ª–æ–∫–∏
    blocks = []
    current_block = []
    current_block_type = None  # 'circular' –∏–ª–∏ 'standard'

    for ex in user_exercises:
        ex_type = 'circular' if ex.circle_training else 'standard'
        if ex_type != current_block_type:
            if current_block:
                blocks.append((current_block_type, current_block))
            current_block = [ex]
            current_block_type = ex_type
        else:
            current_block.append(ex)
    if current_block:
        blocks.append((current_block_type, current_block))

    for block_type, exercises in blocks:
        if block_type == 'circular':
            caption_text += "<strong>–ö—Ä—É–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</strong>\n"
            for ex in exercises:
                caption_text += f"üîÑ <b>{ex.name}</b>\n"
            caption_text += "<strong>–ö–æ–Ω–µ—Ü –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</strong>\n"
        else:
            for ex in exercises:
                caption_text += f"üîò <b>{ex.name}</b>\n"

    if circle_training:
        caption_text += "\n<strong>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∫—Ä—É–≥–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.</strong>"

    return caption_text


def pages(paginator: Paginator, program_name: str):
    btns = {}
    if paginator.has_previous():
        btns["‚óÄ –ü—Ä–µ–¥."] = f"p_{program_name}"
    if paginator.has_next():
        btns["–°–ª–µ–¥. ‚ñ∂"] = f"n_{program_name}"
    return btns


"""
–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
"""


async def main_menu(session: AsyncSession):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    :param session:
    :return:
    """
    try:
        banner = await orm_get_banner(session, "main")

        if not banner or not banner.image:
            logging.warning("–ë–∞–Ω–Ω–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ image")

            error_image = InputMediaPhoto(
                media="https://postimg.cc/Ty7d15kq",
                caption="‚ùóÔ∏è–ë–∞–Ω–Ω–µ—Ä—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            kbds = error_btns()
            return error_image, kbds

        banner_image = InputMediaPhoto(
            media=banner.image,
            caption=f"<strong>{banner.description or ''}</strong>"
        )
        kbds = get_user_main_btns()
        return banner_image, kbds

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}")
        error_image = InputMediaPhoto(
            media="https://postimg.cc/Ty7d15kq",
            caption="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é."
        )
        kbds = error_btns()
        return error_image, kbds



"""
–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
"""


async def profile(session: AsyncSession, level: int, action: str, user_id: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é(1)
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param user_id: Telegram ID
    :return:
    """
    try:
        banner  = await orm_get_banner(session, action)
            
        user = await orm_get_user_by_id(session, user_id)
        banner_image = InputMediaPhoto(media=banner.image,
                                       caption=f"<strong>{banner.description}:\n {user.name} ‚Äî –≤–µ—Å:"
                                               f" {user.weight}</strong>")
        kbds = get_profile_btns(level=level)
        return banner_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ profile: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ profile"
        )
        kbds = error_btns()
        return error_image, kbds


async def training_results(session: AsyncSession, level: int, user_id: int, page: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(2)
    :param user_id: Telegram ID
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :return:
    """
    try:

        banner = await orm_get_banner(session, "training_stats")
        user = await orm_get_user_by_id(session, user_id)
        

        all_sessions = await orm_get_training_sessions_by_user(session, user_id)

        if not all_sessions:
            banner_image = InputMediaPhoto(
                media=banner.image,
                caption=f"<strong>{banner.description}\n\n–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</strong>"
            )
            kbds = get_sessions_results_btns(
                level=level,
                page=page, sessions=[], pagination_btns={})
            return banner_image, kbds

        paginator = Paginator(array=all_sessions, page=page, per_page=5)
        current_page_data = paginator.get_page()

        caption = (
            f"<strong>–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {paginator.page}/{paginator.pages}\n\n"
            f"{banner.description}</strong>"
        )
        banner_image = InputMediaPhoto(
            media=banner.image,
            caption=caption
        )

        pagination_btns = pages(paginator, "t")
        kbds = get_sessions_results_btns(
            level=level,
            page=page,
            pagination_btns=pagination_btns,
            sessions=current_page_data
        )
        return banner_image, kbds

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ training_results_by_session: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π"
        )
        kbds = error_btns()
        return error_image, kbds


async def show_result(session: AsyncSession, level: int, page: int, session_page: int, session_number: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é(3)
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    :param session_page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    :param session_number: –∫–ª—é—á –æ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏)
    :return:
    """
    try:
        banner = await orm_get_banner(session, "training_stats")

        if session_number:

            session_id = retrieve_data_temporarily(session_number)

            session_data = await orm_get_training_session(session, session_id)
            if not session_data:
                banner_image = InputMediaPhoto(
                    media=banner.image,
                    caption="<strong>–î–∞–Ω–Ω—ã–µ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</strong>"
                )
                kbds = error_btns()
                return banner_image, kbds

            all_sets_query = await session.execute(
                select(Set).where(Set.training_session_id == session_data.id)
            )
            all_sets = all_sets_query.scalars().all()

            exercises_map = {}
            for s_obj in all_sets:
                ex_obj = await orm_get_exercise(session, s_obj.exercise_id)

                if ex_obj.id not in exercises_map:
                    exercises_map[ex_obj.id] = {
                        "exercise": ex_obj,
                        "sets": []
                    }
                exercises_map[ex_obj.id]["sets"].append(s_obj)

            exercise_items = list(exercises_map.items())
            paginator = Paginator(array=exercise_items, page=page, per_page=2)
            current_page_data = paginator.get_page()

            result_message = (
                f"<strong>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
                f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {paginator.page}/{paginator.pages}</strong>"
            )

            if not current_page_data:

                result_message += "\n\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç."
            else:

                for idx, (ex_id, data_dict) in enumerate(current_page_data, start=1):
                    ex = data_dict["exercise"]
                    sets_for_ex = data_dict["sets"]

                    result_message += f"\n\nüëâ<strong>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</strong>: {ex.name}"
                    if sets_for_ex:
                        for s_i, s in enumerate(sets_for_ex, start=1):
                            result_message += (
                                f"\n–ü–æ–¥—Ö–æ–¥ <strong>{s_i}</strong>: "
                                f"<strong>{s.repetitions}</strong> –ø–æ–≤—Ç–æ—Ä.,"
                                f" –≤–µ—Å: <strong>{s.weight}</strong> –∫–≥/–±–ª–æ–∫"
                            )
                    else:
                        result_message += "\n   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—Ö–æ–¥–∞—Ö."

            banner_image = InputMediaPhoto(
                media=banner.image,
                caption=result_message
            )

            exercise_pagination_btns = pages(paginator, "d")

            kbds = get_exercises_result_btns(
                level=level,
                session_number=session_number,
                pagination_btns=exercise_pagination_btns,
                page=page, session_page=session_page,
            )

        else:

            banner_image = InputMediaPhoto(
                media=banner.image,
                caption="<strong>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞</strong>"
            )
            kbds = error_btns()

        return banner_image, kbds

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ show_result: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
        )
        kbds = error_btns()
        return error_image, kbds


"""
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
"""


async def schedule(session: AsyncSession, level: int, action: str, training_day_id: int, user_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –º–µ–Ω—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –µ—ë —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤ –ø–æ–ª–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Å—è—Ü–∞
    –ù–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ
    –ó–¥–µ—Å—å –∏–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(1)
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param training_day_id:
    :param user_id: Telegram ID
    :return:
    """
    try:
        banner = await orm_get_banner(session, "schedule")
            
        user_data = await orm_get_user_by_id(session, user_id)
        
        user_program = user_data.actual_program_id
        if user_program:
            today = date.today()
            trd_list = await orm_get_training_days(session, user_data.actual_program_id)
            day_of_week_to_id = {td.day_of_week.strip().lower(): td.id for td in trd_list}
            weekday_index = today.weekday()
            day_of_week_rus = WEEK_DAYS_RU[weekday_index].strip().lower()
            user_training_day_id = day_of_week_to_id.get(day_of_week_rus)
            if training_day_id is None:
                training_day_id = user_training_day_id
            user_trd = await orm_get_training_day(session, training_day_id)

            if user_trd is None:
                banner_image = InputMediaPhoto(
                    media=banner.image,
                    caption="–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
                kbds = get_schedule_btns(
                    level=level,
                    year=today.year,
                    month=today.month,
                    action=action,
                    training_day_id=training_day_id,
                    first_exercise_id=None,
                    active_program=user_program,
                    day_of_week_to_id=day_of_week_to_id,
                )
                return banner_image, kbds

            user_exercises = await orm_get_exercises(session, training_day_id)
            if not user_exercises:
                exercises_caption = "–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."
            else:
                exercises_caption = exercises_in_program(user_exercises)

            banner_image = InputMediaPhoto(
                media=banner.image,
                caption=f"{user_trd.day_of_week}\n\n{exercises_caption}"
            )

            first_exercise_id = user_exercises[0].id if user_exercises else None

            kbds = get_schedule_btns(
                level=level,
                year=today.year,
                month=today.month,
                action=action,
                training_day_id=training_day_id,
                first_exercise_id=first_exercise_id,
                active_program=user_program,
                day_of_week_to_id=day_of_week_to_id
            )

            return banner_image, kbds
        else:
            banner_image = InputMediaPhoto(
                media=banner.image,
                caption=f"{banner.description}\n\n–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n–°–æ–∑–¥–∞–π—Ç–µ –µ—ë –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
            )
            kbds = get_schedule_btns(
                level=level,
                year=None,
                month=None,
                action=action,
                training_day_id=None,
                first_exercise_id=None,
                active_program=None,
            )
            return banner_image, kbds

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ schedule: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ schedule"
        )
        kbds = error_btns()
        return error_image, kbds


async def training_process(session: AsyncSession, level: int, training_day_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–æ—Å—Ä–æ—á–Ω–æ
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é(2)
    :param training_day_id:
    :return:
    """
    try:
        banner = await orm_get_banner(session, "training_process")
        user_exercises = await orm_get_exercises(session, training_day_id)
        exercises_list = exercises_in_program(user_exercises)
        banner_image = InputMediaPhoto(media=banner.image, caption=banner.description + "\n\n" + exercises_list)
        kbds = get_training_process_btns(level=level, training_day_id=training_day_id)
        return banner_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ training_process: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ training_process"
        )
        kbds = error_btns()
        return error_image, kbds


"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
"""


async def programs_catalog(session: AsyncSession, level: int, action: str, user_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(1)
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param user_id: Telegram ID
    :return:
    """
    try:
        banner = await orm_get_banner(session, action)
            
        programs = await    orm_get_programs(session, user_id=user_id)
        user_data = await orm_get_user_by_id(session, user_id)
        banner_image = InputMediaPhoto(media=banner.image, caption=banner.description)

        kbbs = get_user_programs_list(level=level, programs=programs, active_program_id=user_data.actual_program_id)
        return banner_image, kbbs
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ programs_catalog: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ programs_catalog"
        )
        kbds = error_btns()
        return error_image, kbds


async def program(session: AsyncSession, level: int, training_program_id: int, user_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    –ü—Ä–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å, —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å
    –ò–∑ —ç—Ç–æ–≥–æ –º–µ–Ω—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–Ω–µ–π
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(2)
    :param training_program_id:
    :param user_id: Telgram ID
    :return:
    """
    try:
        user_program = await orm_get_program(session, training_program_id)
        banner = await orm_get_banner(session, "user_program")
        user_data = await orm_get_user_by_id(session, user_id)
        indicator = "üü¢" if user_data.actual_program_id == user_program.id else "üî¥"
        banner_image = InputMediaPhoto(media=banner.image,
                                       caption=f"<strong>{banner.description + user_program.name + ' ' + indicator}"
                                               f"</strong>")
        kbds = get_program_btns(level=level, user_program_id=training_program_id)
        return banner_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ program: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ program"
        )
        kbds = error_btns()
        return error_image, kbds


async def program_settings(session: AsyncSession, level: int, training_program_id: int, action: str, user_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(3)
    :param training_program_id:
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param user_id: Telegram ID
    :return:
    """
    try:
        user_program = await orm_get_program(session, training_program_id)
        user_data = await orm_get_user_by_id(session, user_id)
        active_program = True if user_data.actual_program_id == user_program.id else False

        if action == "turn_on_prgm":
            await orm_turn_on_off_program(session, user_id=user_id, program_id=training_program_id)
            active_program = True
        elif action == "turn_off_prgm":
            await orm_turn_on_off_program(session, user_id=user_id, program_id=None)
            active_program = False

        banner = await orm_get_banner(session, "user_program")
        indicator = "üü¢" if user_data.actual_program_id == user_program.id else "üî¥"
        banner_image = InputMediaPhoto(
            media=banner.image,
            caption=f"<strong>{banner.description + user_program.name + ' ' + indicator}</strong>"
        )
        kbds = get_program_stgs_btns(level=level, user_program_id=training_program_id, action=action,
                                     active_program=active_program)
        return banner_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ program_settings: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ programs_settings"
        )
        kbds = error_btns()
        return error_image, kbds


"""
–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å
"""


async def training_days(session, level: int, training_program_id: int, page: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏ (–≤ –≤–∏–¥–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –æ—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é(3)
    :param training_program_id:
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :return:
    """
    try:
        user_program = await orm_get_program(session, training_program_id)
        training_days_list = await orm_get_training_days(session, training_program_id)
        banner = await orm_get_banner(session, "user_program")

        paginator = Paginator(training_days_list, page=page)
        training_day = paginator.get_page()[0]
        user_exercises = await orm_get_exercises(session, training_day.id)
        caption_text = exercises_in_program(user_exercises)
        image = InputMediaPhoto(
            media=banner.image,
            caption=(
                f"<strong>{banner.description + user_program.name}\n\n"
                f" –î–µ–Ω—å {paginator.page} –∏–∑ {paginator.pages} ({training_day.day_of_week})\n\n"
                f"{caption_text}</strong>"
            )
        )
        pagination_btns = pages(paginator, user_program.name)

        kbds = get_training_day_btns(
            level=level,
            user_program_id=training_program_id,
            program=user_program,
            page=page,
            training_day_id=training_day.id,
            pagination_btns=pagination_btns
        )

        return image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ training_days: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ training_days"
        )
        kbds = error_btns()
        return error_image, kbds


async def edit_training_day(session: AsyncSession, level: int, training_program_id: int, page: int,
                            training_day_id: int, action: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–º –¥–Ω–µ
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(4)
    :param training_program_id:
    :param page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :param training_day_id:
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :return:
    """
    try:
        user_exercises = await orm_get_exercises(session, training_day_id)
        banner = await orm_get_banner(session, "user_program")
        training_day = await orm_get_training_day(session, training_day_id)
        caption_text = exercises_in_program(user_exercises)
        empty_list = not user_exercises

        user_image = InputMediaPhoto(
            media=banner.image,
            caption=f"<strong>{training_day.day_of_week}\n\n{caption_text}</strong>",
        )

        kbds = get_trd_edit_btns(level=level, program_id=training_program_id, page=page,
                                 training_day_id=training_day_id,
                                 empty_list=empty_list, action=action)

        return user_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ edit_training_day: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ edit_training_day"
        )
        kbds = error_btns()
        return error_image, kbds


"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
"""


async def show_categories(session: AsyncSession, level: int, training_program_id: int, training_day_id: int, page: int,
                          action: str, user_id: int, circle_training: bool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(5)
    :param training_program_id:
    :param training_day_id:
    :param page: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param user_id: Telegram ID
    :param circle_training: —Ñ–ª–∞–≥(–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –¥–ª—è –û–±—ã—á–Ω–æ–π)
    :return:
    """
    try:
        user_exercises = await orm_get_exercises(session, training_day_id)
        user_data = await orm_get_user_by_id(session, user_id)
        user_name = user_data.name
        user_custom_exercises = await orm_get_user_exercises(session, user_id)
        categories = await orm_get_categories(session, user_id)

        user_program = await orm_get_program(session, training_program_id)
        banner = await orm_get_banner(session, "user_program")
        caption_text = exercises_in_program(user_exercises, circle_training)

        user_image = InputMediaPhoto(
            media=banner.image,
            caption=f"<strong>{banner.description + user_program.name}\n\n{caption_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</strong>",
        )

        kbds = get_category_btns(
            level=level,
            program_id=training_program_id,
            training_day_id=training_day_id,
            page=page,
            categories=categories,
            action=action,
            user_name=user_name,
            len_custom=len(user_custom_exercises),
            circle_training=circle_training,
        )

        return user_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ show_categories"
        )
        kbds = error_btns()
        return error_image, kbds


async def show_exercises_in_category(session: AsyncSession, level: int, exercise_id: int, training_day_id: int,
                                     page: int, action: str, training_program_id: int, category_id: int, user_id: int,
                                     empty: bool, circle_training: bool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(6)
    :param exercise_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :param training_day_id:
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param training_program_id:
    :param category_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param user_id: Telegram ID
    :param empty: –§–ª–∞–≥ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
    :param circle_training: –§–ª–∞–≥ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :return:
    """
    try:
        banner = await orm_get_banner(session, "user_program")
        category = await orm_get_category(session, category_id)
        user_program = await orm_get_program(session, training_program_id)
        admin_exercises = await orm_get_admin_exercises_in_category(session, category_id)
        user_exercises = await orm_get_exercises(session, training_day_id)
        user_custom_exercises = await orm_get_user_exercises_in_category(session, category_id, user_id)
        if get_action_part(action).startswith("add_"):
            if exercise_id:
                if "custom" in get_action_part(action):
                    exercise = await orm_get_user_exercise(session, exercise_id)
                    exercise_type = 'user'
                else:
                    exercise = await orm_get_admin_exercise(session, exercise_id)
                    exercise_type = 'admin'

                if exercise:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                    add_data = {
                        "name": exercise.name,
                        "description": exercise.description,
                        "circle_training": circle_training,
                    }

                    if exercise_type == 'admin':
                        add_data['admin_exercise_id'] = exercise.id
                    elif exercise_type == 'user':
                        add_data['user_exercise_id'] = exercise.id

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞
                    await orm_add_exercise(session, add_data, training_day_id, exercise_type)
                    user_exercises = await orm_get_exercises(session, training_day_id)

        if not empty and category_id:
            caption_text = exercises_in_program(user_exercises, circle_training)

            user_image = InputMediaPhoto(
                media=banner.image,
                caption=f"<strong>{banner.description + user_program.name}\n\n{caption_text}\n\n"
                        f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.name}</strong>",
            )
            kbds = get_category_exercise_btns(level=level,
                                              program_id=training_program_id,
                                              training_day_id=training_day_id,
                                              page=page,
                                              template_exercises=admin_exercises,
                                              user_exercises=user_custom_exercises, actual_exercises=user_exercises,
                                              action=action, category_id=category_id, empty=empty,
                                              circle_training=circle_training)

        else:
            user_custom_exercises = await orm_get_user_exercises(session, user_id)
            caption_text = exercises_in_program(user_exercises, circle_training)
            if user_custom_exercises:
                user_image = InputMediaPhoto(
                    media=banner.image,
                    caption=f"<strong>{banner.description + user_program.name}\n\n{caption_text}\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</strong>",
                )
            else:
                user_image = InputMediaPhoto(
                    media=banner.image,
                    caption=f"<strong>{banner.description + user_program.name}\n\n{caption_text}\n\n"
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n\n"
                            f"{exercises_in_program(user_custom_exercises)}</strong>",
                )
            kbds = get_category_exercise_btns(level=level,
                                              program_id=training_program_id,
                                              training_day_id=training_day_id,
                                              page=page,
                                              user_exercises=user_custom_exercises,
                                              category_id=None,
                                              action=action, empty=empty, actual_exercises=user_exercises,
                                              circle_training=circle_training)

        return user_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ show_exercises_in_category: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ show_exercises_in_category"
        )
        kbds = error_btns()
        return error_image, kbds


async def edit_exercises(session: AsyncSession, level: int, exercise_id: int, training_day_id: int,
                         page: int, action: str, training_program_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: –º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑, —É–¥–∞–ª–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–ª-–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(5)
    :param exercise_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :param training_day_id:
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param training_program_id:
    :return:
    """
    try:
        user_exercises = await orm_get_exercises(session, training_day_id)
        banner = await orm_get_banner(session, "user_program")
        user_image = InputMediaPhoto(
            media=banner.image,
            caption="<strong>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞:</strong>",
        )

        kbds = get_edit_exercise_btns(level=level, program_id=training_program_id, user_exercises=user_exercises,
                                      page=page, exercise_id=exercise_id,
                                      action=action,
                                      training_day_id=training_day_id)

        return user_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ edit_exercises: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ edit_exercises"
        )
        kbds = error_btns()
        return error_image, kbds


async def exercise_settings(session: AsyncSession, level: int, exercise_id: int, training_day_id: int,
                            page: int, action: str, training_program_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(6)
    :param exercise_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :param training_day_id:
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param training_program_id:
    :return:
    """
    try:
        user_exercise = await orm_get_exercise(session, exercise_id)
        banner = await orm_get_banner(session, "user_program")
        base_ex_sets = user_exercise.base_sets
        user_image = InputMediaPhoto(
            media=banner.image,
            caption="<strong>–î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π</strong>",
        )

        kbds = get_exercise_settings_btns(level=level, action=action, program_id=training_program_id,
                                          page=page, exercise_id=exercise_id,
                                          training_day_id=training_day_id, user_exercise=user_exercise.name,
                                          base_ex_sets=base_ex_sets)

        return user_image, kbds
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ exercise_settings: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ exercise_settings"
        )
        kbds = error_btns()
        return error_image, kbds


async def custom_exercises(session: AsyncSession, level: int, training_day_id: int,
                           page: int, action: str, training_program_id: int, category_id: int, user_id: int,
                           empty: bool, exercise_id: int, circle_training: bool):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    :param session:
    :param level: —É—Ä–æ–≤–µ–Ω—å(7)
    :param training_day_id:
    :param page: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :param action: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    :param training_program_id:
    :param category_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param user_id: Telegram ID
    :param empty: –§–ª–∞–≥ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º
    :param exercise_id: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :param circle_training: –§–ª–∞–≥ —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    :return:
    """
    try:
        if empty is False and category_id:
            custom_user_exercises = await orm_get_user_exercises_in_category(session, category_id, user_id)
            user_category = await orm_get_category(session, category_id)
            banner = await orm_get_banner(session, "user_program")
            if custom_user_exercises:

                user_image = InputMediaPhoto(
                    media=banner.image,
                    caption=f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ({user_category.name})</strong>\n\n"
                            f"<strong>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞:</strong>"
                )
            else:
                user_image = InputMediaPhoto(
                    media=banner.image,
                    caption=f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ({user_category.name})</strong>\n\n"
                            f"<strong>{exercises_in_program(custom_user_exercises)}</strong>"
                )

            kbds = get_custom_exercise_btns(level=level, action=action, program_id=training_program_id, page=page,
                                            training_day_id=training_day_id, category_id=category_id, empty=empty,
                                            user_exercises=custom_user_exercises, exercise_id=exercise_id,
                                            circle_training=circle_training)
        else:
            custom_user_exercises = await orm_get_user_exercises(session, user_id)
            banner = await orm_get_banner(session, "user_program")
            if custom_user_exercises:

                user_image = InputMediaPhoto(
                    media=banner.image,
                    caption=f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: </strong>\n\n"
                            f"<strong>–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞:</strong>")
            else:
                user_image = InputMediaPhoto(
                    media=banner.image,
                    caption=f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: </strong>\n\n"
                            f"<strong>{exercises_in_program(custom_user_exercises)}</strong>")

            kbds = get_custom_exercise_btns(level=level, action=action, program_id=training_program_id, page=page,
                                            training_day_id=training_day_id, category_id=category_id, empty=empty,
                                            user_exercises=custom_user_exercises, exercise_id=exercise_id,
                                            circle_training=circle_training)

        return user_image, kbds

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ custom_exercises: {e}")
        error_image = InputMediaPhoto(
            media='https://postimg.cc/Ty7d15kq',
            caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ custom_exercises"
        )
        kbds = error_btns()
        return error_image, kbds


"""
–ú–µ—Ç–∞-—Ñ—É–Ω–∫—Ü–∏—è (–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é)
"""


async def get_menu_content(session: AsyncSession, level: int, action: str, training_program_id: int = None,
                           exercise_id: int = None, page: int = None, training_day_id: int = None, user_id: int = None,
                           category_id: int = None, month: int = None, year: int = None, set_id: int = None,
                           empty: bool = False, circle_training: bool = False, session_number: str = None,
                           exercises_page: int = None):
    start_time = time.monotonic()
    try:

        if level == 0:
            return await main_menu(session)

        elif level == 1:
            if action == "program":
                return await programs_catalog(session, level, action, user_id)
            elif action == "profile":
                return await profile(session, level, action, user_id)
            elif action in ["schedule", "month_schedule", "t_day"]:
                return await schedule(session, level, action, training_day_id, user_id)

        elif level == 2:
            if action == "training_process":
                return await training_process(session, level, training_day_id)
            if action == "trd_sts" or action.startswith("n_t") or action.startswith("p_t"):
                return await training_results(session, level, user_id, page)
            return await program(session, level, training_program_id, user_id)

        elif level == 3:
            if action in ["prg_stg", "turn_on_prgm", "turn_off_prgm"] or action.startswith(
                    "to_del_prgm") or action.startswith("prgm_del"):
                return await program_settings(session, level, training_program_id, action, user_id)
            if action == "t_d" or action.startswith("n_d") or action.startswith("p_d"):
                return await show_result(session, level, exercises_page, page, session_number)
            return await training_days(session, level, training_program_id, page)

        elif level == 4:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –¥–Ω—è
            return await edit_training_day(session, level, training_program_id, page, training_day_id, action)

        elif level == 5:
            if action in ["edit_excs", "shd/edit_excs", "to_edit", "shd/to_edit",
                          "del", "shd/del", "mv", "shd/mv"]:
                return await edit_exercises(session, level, exercise_id, training_day_id, page, action,
                                            training_program_id)
            else:
                return await show_categories(session, level, training_program_id, training_day_id, page, action,
                                             user_id, circle_training)

        elif level == 6:
            if action in ["ex_stg", "shd/ex_stg"] or action.startswith("‚ûï") or action.startswith(
                    "‚ûñ") or action.startswith("shd/‚ûï") or action.startswith("shd/‚ûñ"):
                return await exercise_settings(session, level, exercise_id, training_day_id, page, action,
                                               training_program_id)
            return await show_exercises_in_category(session, level, exercise_id, training_day_id, page, action,
                                                    training_program_id, category_id, user_id, empty, circle_training)

        elif level == 7:
            return await custom_exercises(session, level, training_day_id, page, action,
                                          training_program_id, category_id, user_id, empty, exercise_id,
                                          circle_training)

        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é: {level}")
            return (InputMediaPhoto(media='https://postimg.cc/Ty7d15kq',
                                    caption="–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é"),
                    error_btns())
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ get_menu_content: {e}")
        return (InputMediaPhoto(media='https://postimg.cc/Ty7d15kq',
                                caption="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é"),
                error_btns())
    finally:
        end_time = time.monotonic()
        duration = end_time - start_time
        logging.info(f"get_menu_content –¥–ª—è action='{action}', level={level} –∑–∞–Ω—è–ª–∞ {duration:.2f} —Å–µ–∫—É–Ω–¥")
